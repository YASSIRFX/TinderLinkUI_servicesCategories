{"ast":null,"code":"// src/services/ServiceService.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:7070/api/services';\nclass ServiceService {\n  static async getAllServices(token) {\n    try {\n      const response = await axios.get(`${API_URL}/all`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getServiceById(id, token) {\n    try {\n      const response = await axios.get(`${API_URL}/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async createService(service, token) {\n    try {\n      const response = await axios.post(`${API_URL}/add`, service, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async updateService(id, service, token) {\n    try {\n      const response = await axios.put(`${API_URL}/update/${id}`, service, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async deleteService(id, token) {\n    try {\n      const response = await axios.delete(`${API_URL}/delete/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async searchServices(query, token) {\n    try {\n      const response = await axios.get(`${API_URL}/search`, {\n        params: {\n          query\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async classifyServices(token) {\n    try {\n      const response = await axios.get(`${API_URL}/classify`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n  static async getServiceCatalog(token) {\n    try {\n      const response = await axios.get(`${API_URL}/catalog`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (err) {\n      throw err;\n    }\n  }\n}\nexport default ServiceService;","map":{"version":3,"names":["axios","API_URL","ServiceService","getAllServices","token","response","get","headers","Authorization","data","err","getServiceById","id","createService","service","post","updateService","put","deleteService","delete","searchServices","query","params","classifyServices","getServiceCatalog"],"sources":["C:/Users/Yassir/Desktop/TenderLink_ui/src/components/services/ServiceService.js"],"sourcesContent":["// src/services/ServiceService.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:7070/api/services';\r\n\r\nclass ServiceService {\r\n  static async getAllServices(token) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/all`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async getServiceById(id, token) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async createService(service, token) {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/add`, service, {\r\n        headers: { \r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async updateService(id, service, token) {\r\n    try {\r\n      const response = await axios.put(`${API_URL}/update/${id}`, service, {\r\n        headers: { \r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async deleteService(id, token) {\r\n    try {\r\n      const response = await axios.delete(`${API_URL}/delete/${id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async searchServices(query, token) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/search`, {\r\n        params: { query },\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async classifyServices(token) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/classify`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  static async getServiceCatalog(token) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/catalog`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ServiceService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}