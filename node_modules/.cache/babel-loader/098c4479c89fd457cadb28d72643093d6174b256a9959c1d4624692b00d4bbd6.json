{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yassir\\\\Desktop\\\\TenderLink_ui\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/AuthContext.js\n/*import React, { createContext, useState, useEffect, useContext } from 'react';\r\nexport const AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('token'));\r\n  const [role, setRole] = useState(localStorage.getItem('role') || '');\r\n\r\n  useEffect(() => {\r\n    // Whenever localStorage changes (on page refresh or manual edits), sync state\r\n    const token = localStorage.getItem('token');\r\n    const storedRole = localStorage.getItem('role');\r\n    setIsAuthenticated(!!token);\r\n    setRole(storedRole || '');\r\n  }, []);\r\n\r\n  // Call this to log the user in and update global state + localStorage\r\n  const login = (token, userRole) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('role', userRole);\r\n    setIsAuthenticated(true);\r\n    setRole(userRole);\r\n  };\r\n\r\n  // Call this to log the user out and update global state + localStorage\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('role');\r\n    setIsAuthenticated(false);\r\n    setRole('');\r\n  };\r\n\r\n  // A helper to check if the user is an admin\r\n  const isAdmin = role === 'ADMIN';\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, role, isAdmin, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n*/\n// src/AuthContext.js\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\n  const [role, setRole] = useState(localStorage.getItem('role') || '');\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    const storedRole = localStorage.getItem('role');\n    setToken(storedToken || '');\n    setRole(storedRole || '');\n    setIsAuthenticated(!!storedToken);\n  }, []);\n  const login = (receivedToken, userRole) => {\n    localStorage.setItem('token', receivedToken);\n    localStorage.setItem('role', userRole);\n    setToken(receivedToken);\n    setRole(userRole);\n    setIsAuthenticated(true);\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n    setToken('');\n    setRole('');\n    setIsAuthenticated(false);\n  };\n\n  // isAdmin = true if role is \"ADMIN\"\n  const isAdmin = role === 'ADMIN';\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      isAuthenticated,\n      role,\n      isAdmin,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n// Optional helper to use context in any component\n_s(AuthProvider, \"xmM85S95POqf55VWfUVwn596DV8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","role","setRole","isAuthenticated","setIsAuthenticated","storedToken","storedRole","login","receivedToken","userRole","setItem","logout","removeItem","isAdmin","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Yassir/Desktop/TenderLink_ui/src/AuthContext.js"],"sourcesContent":["// src/AuthContext.js\r\n/*import React, { createContext, useState, useEffect, useContext } from 'react';\r\nexport const AuthContext = createContext();\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('token'));\r\n  const [role, setRole] = useState(localStorage.getItem('role') || '');\r\n\r\n  useEffect(() => {\r\n    // Whenever localStorage changes (on page refresh or manual edits), sync state\r\n    const token = localStorage.getItem('token');\r\n    const storedRole = localStorage.getItem('role');\r\n    setIsAuthenticated(!!token);\r\n    setRole(storedRole || '');\r\n  }, []);\r\n\r\n  // Call this to log the user in and update global state + localStorage\r\n  const login = (token, userRole) => {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('role', userRole);\r\n    setIsAuthenticated(true);\r\n    setRole(userRole);\r\n  };\r\n\r\n  // Call this to log the user out and update global state + localStorage\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('role');\r\n    setIsAuthenticated(false);\r\n    setRole('');\r\n  };\r\n\r\n  // A helper to check if the user is an admin\r\n  const isAdmin = role === 'ADMIN';\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isAuthenticated, role, isAdmin, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n*/\r\n// src/AuthContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [token, setToken] = useState(localStorage.getItem('token') || '');\r\n  const [role, setRole] = useState(localStorage.getItem('role') || '');\r\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\r\n\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedRole = localStorage.getItem('role');\r\n    setToken(storedToken || '');\r\n    setRole(storedRole || '');\r\n    setIsAuthenticated(!!storedToken);\r\n  }, []);\r\n\r\n  const login = (receivedToken, userRole) => {\r\n    localStorage.setItem('token', receivedToken);\r\n    localStorage.setItem('role', userRole);\r\n    setToken(receivedToken);\r\n    setRole(userRole);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('role');\r\n    setToken('');\r\n    setRole('');\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  // isAdmin = true if role is \"ADMIN\"\r\n  const isAdmin = role === 'ADMIN';\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, isAuthenticated, role, isAdmin, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Optional helper to use context in any component\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;EACvE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAACW,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;EACpE,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAACS,KAAK,CAAC;EAE/DR,SAAS,CAAC,MAAM;IACd,MAAMgB,WAAW,GAAGN,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,MAAMM,UAAU,GAAGP,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/CF,QAAQ,CAACO,WAAW,IAAI,EAAE,CAAC;IAC3BH,OAAO,CAACI,UAAU,IAAI,EAAE,CAAC;IACzBF,kBAAkB,CAAC,CAAC,CAACC,WAAW,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,KAAK,GAAGA,CAACC,aAAa,EAAEC,QAAQ,KAAK;IACzCV,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEF,aAAa,CAAC;IAC5CT,YAAY,CAACW,OAAO,CAAC,MAAM,EAAED,QAAQ,CAAC;IACtCX,QAAQ,CAACU,aAAa,CAAC;IACvBN,OAAO,CAACO,QAAQ,CAAC;IACjBL,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMO,MAAM,GAAGA,CAAA,KAAM;IACnBZ,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAChCb,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC;IAC/Bd,QAAQ,CAAC,EAAE,CAAC;IACZI,OAAO,CAAC,EAAE,CAAC;IACXE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;;EAED;EACA,MAAMS,OAAO,GAAGZ,IAAI,KAAK,OAAO;EAEhC,oBACET,OAAA,CAACC,WAAW,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAElB,KAAK;MAAEM,eAAe;MAAEF,IAAI;MAAEY,OAAO;MAAEN,KAAK;MAAEI;IAAO,CAAE;IAAAhB,QAAA,EACnFA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAEA;AAAAvB,EAAA,CAvCgBF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAwC5B,OAAO,MAAM2B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMhC,UAAU,CAACG,WAAW,CAAC;AAAA;AAAC6B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}